<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CentOS配置网站服务器]]></title>
      <url>https://stevenxiaoming.github.io/2017/04/16/CentOS%E9%85%8D%E7%BD%AE%E7%BD%91%E7%AB%99%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>使用腾讯云服务器，1核 1GB内存 1Mbps 20G磁盘容量</p>
<p>系统：CentOS 7.2 64位<br>计划使用 MySQL5.7 + JDK1.8 + Tomcat7 (+ Redis)</p>
<p>由于是从Windows系统转Linux系统，所以一切配置从0开始。</p>
<h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><h3 id="服务器连接"><a href="#服务器连接" class="headerlink" title="服务器连接"></a>服务器连接</h3><p>Windows本机安装 SSH Secure Shell Client 或其他工具，用于连接远程服务器。</p>
<h3 id="设置安全组策略"><a href="#设置安全组策略" class="headerlink" title="设置安全组策略"></a>设置安全组策略</h3><p>增加http（80）端口和https（443）端口</p>
<h3 id="修改默认密码"><a href="#修改默认密码" class="headerlink" title="修改默认密码"></a>修改默认密码</h3><p>登陆后使用了命令<code>passwd</code>设置新密码</p>
<h2 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h2><ol>
<li><p>下载JDK安装包，可到<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网</a>查看下载，或使用命令行后台下载</p>
<blockquote>
<p>Oracle需要同意协议才能下载所以需要添加部分参数，下载地址可前往官网获取</p>
<pre><code> wget --no-check-certificate --no-cookie --header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.rpm
</code></pre></blockquote>
</li>
<li><p>安装JDK，并检查是否安装成功</p>
<pre><code> rpm -ivh jdk-8u121-linux-x64.rpm
 java -version
</code></pre></li>
</ol>
<p>JDK安装完成</p>
<h2 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7"></a>安装MySQL5.7</h2><ol>
<li><p>下载MySQL安装包，可到<a href="http://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="external">官网</a>查看下载</p>
<pre><code> wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm
</code></pre></li>
<li><p>配置Mysql Yum源，可参考官网安装教程</p>
<pre><code> yum localinstall mysql57-community-release-el7-10.noarch.rpm
</code></pre></li>
<li><p>安装MySql</p>
<pre><code> yum install mysql-community-server
</code></pre></li>
<li><p>启动MySql服务，并检查状态</p>
<pre><code> systemctl start mysqld
 systemctl status mysqld
</code></pre></li>
<li><p>设置开机启动</p>
<pre><code> systemctl enable mysqld
 systemctl daemon-reload
</code></pre></li>
<li><p>修改root默认密码</p>
</li>
</ol>
<p>查找当前密码，MySQL5.7不再使用空密码，而是会生成一个默认密码，在在日志中可以查看</p>
<pre><code>    grep &#39;temporary password&#39; /var/log/mysqld.log
</code></pre><p>登录MySQL的root账号，修改密码(*代表设置的新密码)</p>
<pre><code>    mysql -uroot -p
    ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;********&#39;;
</code></pre><ol>
<li>修改数据库配置</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 项目PROJECT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> WebService </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[矩阵转置速度与Cache命中率分析]]></title>
      <url>https://stevenxiaoming.github.io/2017/04/12/%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE%E9%80%9F%E5%BA%A6%E4%B8%8ECache%E5%91%BD%E4%B8%AD%E7%8E%87%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>进行矩阵转置时，512大小的矩阵和513大小的矩阵速度，哪个更快？1024和1025呢？</p>
<p>按照理论，513的矩阵比512的矩阵快，1025的矩阵比1024的矩阵快。所以做几个实验来验证看看。</p>
<h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p>由于程序是在虚拟机上运行，与主机测试的结果可能有出入。</p>
<table>
<thead>
<tr>
<th>index</th>
<th>level</th>
<th>type</th>
<th>size</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>Data</td>
<td>32K</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>Instruction</td>
<td>32K</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>Unified</td>
<td>256K</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>Unified</td>
<td>6144K</td>
</tr>
</tbody>
</table>
<h2 id="比较矩阵转置速度"><a href="#比较矩阵转置速度" class="headerlink" title="比较矩阵转置速度"></a>比较矩阵转置速度</h2><p>编写矩阵转置程序（C语言）</p>
<pre class="line-numbers language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>

    <span class="token macro property">#<span class="token directive keyword">define</span> SIZE 512 </span><span class="token comment" spellcheck="true">// 可以设置为任一大小</span>
    <span class="token keyword">int</span> mat<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token macro property">#<span class="token directive keyword">define</span> TIMES 1000</span>

    <span class="token keyword">long</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> timeval tv<span class="token punctuation">;</span>
        <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tv<span class="token punctuation">.</span>tv_sec <span class="token operator">*</span> <span class="token number">1000000</span> <span class="token operator">+</span> tv<span class="token punctuation">.</span>tv_usec<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>
        start <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TIMES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        end <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一共编写了2组测试样例，每组3个程序，矩阵大小为</p>
<table>
<thead>
<tr>
<th>　</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td>第一组</td>
<td>511</td>
<td>512</td>
<td>513</td>
</tr>
<tr>
<td>第二组</td>
<td>1023</td>
<td>1024</td>
<td>1025</td>
</tr>
</tbody>
</table>
<blockquote>
<p>实验测试样例最大只选取了2^10级，当级数达到2^11级时，cache命中率会报错</p>
</blockquote>
<p>在每个程序中，都会将矩阵转置1000次，并求平均值。</p>
<p>执行多次程序后再求平均值，得到结果如下（单位：微秒）：</p>
<h3 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h3><table>
<thead>
<tr>
<th>次数</th>
<th>511</th>
<th>512</th>
<th>513</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1352.858</td>
<td>1694.649</td>
<td>2784.602</td>
</tr>
<tr>
<td>2</td>
<td>1354.494</td>
<td>1675.293</td>
<td>2761.037</td>
</tr>
<tr>
<td>3</td>
<td>1346.760</td>
<td>1672.241</td>
<td>2824.607</td>
</tr>
<tr>
<td>4</td>
<td>1356.021</td>
<td>1680.417</td>
<td>3023.677</td>
</tr>
<tr>
<td>5</td>
<td>1393.850</td>
<td>1790.785</td>
<td>2670.411</td>
</tr>
<tr>
<td>6</td>
<td>1364.908</td>
<td>1670.403</td>
<td>1869.946</td>
</tr>
<tr>
<td>7</td>
<td>1410.571</td>
<td>1660.457</td>
<td>1382.319</td>
</tr>
<tr>
<td>8</td>
<td>1429.591</td>
<td>1654.826</td>
<td>1344.526</td>
</tr>
<tr>
<td>9</td>
<td>1406.000</td>
<td>1661.112</td>
<td>1341.535</td>
</tr>
<tr>
<td>10</td>
<td>1483.621</td>
<td>1724.635</td>
<td>1337.413</td>
</tr>
<tr>
<td>平均</td>
<td>1389.867</td>
<td>1688.482</td>
<td>2134.007</td>
</tr>
</tbody>
</table>
<p>附实验截图：<br><img src="/2017/04/12/矩阵转置速度与Cache命中率分析/1.jpg" alt="513异常测试结果"></p>
<h3 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h3><table>
<thead>
<tr>
<th>次数</th>
<th>511</th>
<th>512</th>
<th>513</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>12564.089</td>
<td>15739.079</td>
<td>12882.077</td>
</tr>
<tr>
<td>2</td>
<td>10887.729</td>
<td>15643.421</td>
<td>13102.483</td>
</tr>
<tr>
<td>3</td>
<td>11521.719</td>
<td>16257.431</td>
<td>13011.284</td>
</tr>
<tr>
<td>4</td>
<td>12407.815</td>
<td>16903.234</td>
<td>13221.209</td>
</tr>
<tr>
<td>平均</td>
<td>11845.338</td>
<td>16135.791</td>
<td>13054.263</td>
</tr>
</tbody>
</table>
<blockquote>
<p>第一组实验中结果与理论明显不符，513大小的矩阵置换最初用时比512的快了近50%，但是次数增加后所花的时间越来越少？？？<br>第二组实验由于耗时过长，且每一组的结果基本稳定，4组实验结果与理论结果相符，因此没有做过多的实验。</p>
</blockquote>
<h3 id="额外测试"><a href="#额外测试" class="headerlink" title="额外测试"></a>额外测试</h3><p>由于第一组实验的严重误差，所以决定对513大小的矩阵程序再运行，查看结果。<br><img src="/2017/04/12/矩阵转置速度与Cache命中率分析/2.jpg" alt="513异常测试结果"></p>
<p>最后求得平均值为 1380.944， 略快于511大小的矩阵，并且这次实验的结果较为稳定。</p>
<h2 id="比较Cache命中率"><a href="#比较Cache命中率" class="headerlink" title="比较Cache命中率"></a>比较Cache命中率</h2><p>接下来使用相同的代码，做Cache命中率分析，使用软件为Valgrind。每组实验采用了千次循环，在程序本身运行的前提下，又加入了动态测试工具，<strong>耗时极长</strong>。</p>
<h3 id="第一组-1"><a href="#第一组-1" class="headerlink" title="第一组"></a>第一组</h3><table>
<thead>
<tr>
<th>　</th>
<th>511</th>
<th>512</th>
<th>513</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td>10,713,628,328</td>
<td>8,657,917,403</td>
<td>10,797,640,986</td>
</tr>
<tr>
<td>I1 misses</td>
<td>1,004</td>
<td>1,003</td>
<td>1,002</td>
</tr>
<tr>
<td>LLi</td>
<td>989</td>
<td>988</td>
<td>987</td>
</tr>
<tr>
<td>I1 miss rate</td>
<td>0.000009371%</td>
<td>0.000011585%</td>
<td>0.000009280%</td>
</tr>
<tr>
<td>LLi miss rate</td>
<td>0.000009231%</td>
<td>0.000011412%</td>
<td>0.000009141%</td>
</tr>
<tr>
<td>　</td>
<td>　</td>
<td>　</td>
<td>　</td>
</tr>
<tr>
<td>D</td>
<td>4,181,869,368</td>
<td>4,198,248,539</td>
<td>4,214,659,689</td>
</tr>
<tr>
<td>D1 misses</td>
<td>96,680,808</td>
<td>278,004,540</td>
<td>274,575,605</td>
</tr>
<tr>
<td>LLd misses</td>
<td>18,773</td>
<td>18,837</td>
<td>18,901</td>
</tr>
<tr>
<td>D1 miss rate</td>
<td>2.311904067%</td>
<td>6.621917150%</td>
<td>6.514775219%</td>
</tr>
<tr>
<td>LLd miss rate</td>
<td>0.000448914%</td>
<td>0.000448687%</td>
<td>0.000448459%</td>
</tr>
<tr>
<td>　</td>
<td>　</td>
<td>　</td>
<td>　</td>
</tr>
<tr>
<td>LL</td>
<td>96,681,812</td>
<td>278,005,543</td>
<td>274,576,607</td>
</tr>
<tr>
<td>LL misses</td>
<td>19,762</td>
<td>19,825</td>
<td>19,888</td>
</tr>
<tr>
<td>LL miss rate</td>
<td>0.000131815%</td>
<td>0.000150942%</td>
<td>0.000130099%</td>
</tr>
</tbody>
</table>
<h3 id="第二组-1"><a href="#第二组-1" class="headerlink" title="第二组"></a>第二组</h3><table>
<thead>
<tr>
<th>　</th>
<th>1023</th>
<th>1024</th>
<th>1025</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td>42,930,725,289</td>
<td>34,623,984,726</td>
<td>43,098,736,721</td>
</tr>
<tr>
<td>I1 misses</td>
<td>1,007</td>
<td>1,004</td>
<td>1,007</td>
</tr>
<tr>
<td>LLi</td>
<td>992</td>
<td>989</td>
<td>992</td>
</tr>
<tr>
<td>I1 miss rate</td>
<td>0.000002346%</td>
<td>0.000002900%</td>
<td>0.000002336%</td>
</tr>
<tr>
<td>LLi miss rate</td>
<td>0.000002311%</td>
<td>0.000002856%</td>
<td>0.000002302%</td>
</tr>
<tr>
<td>　</td>
<td>　</td>
<td>　</td>
<td>　</td>
</tr>
<tr>
<td>D</td>
<td>16,755,945,374</td>
<td>16,788,715,664</td>
<td>16,821,518,046</td>
</tr>
<tr>
<td>D1 misses</td>
<td>1,110,984,565</td>
<td>1,113,157,692</td>
<td>1,114,442,821</td>
</tr>
<tr>
<td>LLd misses</td>
<td>67,861</td>
<td>67,989</td>
<td>68,117</td>
</tr>
<tr>
<td>D1 miss rate</td>
<td>6.630390230%</td>
<td>6.630392189%</td>
<td>6.625102550%</td>
</tr>
<tr>
<td>LLd miss rate</td>
<td>0.000404997%</td>
<td>0.000404968%</td>
<td>0.000404940%</td>
</tr>
<tr>
<td>　</td>
<td>　</td>
<td>　</td>
<td>　</td>
</tr>
<tr>
<td>LL</td>
<td>1,110,985,572</td>
<td>1,113,158,696</td>
<td>1,114,443,828</td>
</tr>
<tr>
<td>LL misses</td>
<td>68,853</td>
<td>68,978</td>
<td>69,109</td>
</tr>
<tr>
<td>LL miss rate</td>
<td>0.000113249%</td>
<td>0.000131322%</td>
<td>0.000113229%</td>
</tr>
</tbody>
</table>
<blockquote>
<p>数据量极其庞大，仅挑选其中部分进行分析。<br>使用该软件时，每一次测试的结果均相同。</p>
</blockquote>
<h2 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h2><h3 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h3><p>对于矩阵转置速度比较中，大小为513的矩阵进行转置测试，其结果极不稳定，前10次的测试中，有一半以上的用时远高于512大小的矩阵，而在之后重复多次测试后，结果趋于稳定。原因不明。</p>
<h3 id="命中率"><a href="#命中率" class="headerlink" title="命中率"></a>命中率</h3><h4 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h4><p>2^n级的指令数基本在2^n-1和2^n+1指令数的80%，指令的miss数基本相同个。所以2^n级指令的miss率更高。</p>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>由于数据量庞大，因此每组样例中的测试数据所用到的Date数差距不太大，差距在0.5%以内且接近正比例关系。而miss数量有较大差距。</p>
<p>在第一组测试数据中，511的miss数量远小于512和513，大约只有后者的三分之一。而512的miss数量略比513的高。未命中率上511仅有2.3%，而后两者在6.6%左右，且512高于513。</p>
<p>在第二组测试数据中，miss数就比较接近，且呈正相关，不过在miss率上面，1024最高，但是与1023的误差极小，而1025的miss率比1024低了0.005%，甚至低于1023。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>参考内容：<a href="http://stackoverflow.com/questions/11413855/why-is-transposing-a-matrix-of-512x512-much-slower-than-transposing-a-matrix-of" target="_blank" rel="external">stackoverflow问答帖</a></p>
<p>其主要原因和cache构造以及读写数据的方式有关，目前计算机采用的cache替换策略主要为LRU，映射方式主要为组相联。</p>
<p>每一个内存地址对应一个cache分组，且只能存放在该分组中，一个分组可以有多行。若分组已满，则采用LRU替换策略进行替换。</p>
<p>矩阵的数据是连续存放，当矩阵大小为某个数或其整数倍时，当连续选取同一列中的数据时，就会存放到同一分组中，会造成cache中空间位置不足，而执行替换策略，在下一次使用时又需要重新替换回来。而其他位置的cache空间没有被充分利用。</p>
<p>而当这个矩阵大小不为某个数的整数倍时，连续选取同一列中的数据就不会存放在同一分组中，而是其他分组中，当再次选用数据时，数据已经存在于cache中就不需要重新读取，节省了读写时间。</p>
<p>那个数主要有cache每组的行数和行数容量来决定。</p>
<h3 id="附：Java环境下的测试"><a href="#附：Java环境下的测试" class="headerlink" title="附：Java环境下的测试"></a>附：Java环境下的测试</h3><p>C语言在运行时，不确定是否有进行语法优化，而Java在JVM虚拟机环境下运行，在运行时会进行指令重排进行优化，节省运算时间。</p>
<p>实验代码：</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> TIMES <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重复次数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Long<span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>0L<span class="token punctuation">,</span> 0L<span class="token punctuation">,</span> 0L<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间数组，统计每一类所以用时间总和</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 测试的矩阵大小级别</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">trans</span><span class="token punctuation">(</span>level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">trans</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">trans</span><span class="token punctuation">(</span>level <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Average: \n"</span>
                <span class="token operator">+</span> <span class="token punctuation">(</span>level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token string">"\n"</span>
                <span class="token operator">+</span> level <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token string">"\n"</span>
                <span class="token operator">+</span> <span class="token punctuation">(</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">trans</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Long start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">;</span>
        <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        start_time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TIMES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        end_time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Long time <span class="token operator">=</span> <span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">[</span>size <span class="token operator">-</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> time<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size-"</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果如图：<br>从左到右分别是 实验序号、矩阵大小和运行时间<br><img src="/2017/04/12/矩阵转置速度与Cache命中率分析/java512.jpg" alt="512级测试结果"></p>
<p><img src="/2017/04/12/矩阵转置速度与Cache命中率分析/java1024.jpg" alt="1024级测试结果"></p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cache </tag>
            
            <tag> 矩阵转置 </tag>
            
            <tag> cache命中率 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[科学学习计算机系统结构]]></title>
      <url>https://stevenxiaoming.github.io/2017/04/09/%E7%A7%91%E5%AD%A6%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="第1-3周"><a href="#第1-3周" class="headerlink" title="第1~3周"></a>第1~3周</h2><h3 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h3><p><img src="/2017/04/09/科学学习计算机系统结构/1-1.jpg" alt="洋葱模型"></p>
<h3 id="CPU结构功能图"><a href="#CPU结构功能图" class="headerlink" title="CPU结构功能图"></a>CPU结构功能图</h3><p><img src="/2017/04/09/科学学习计算机系统结构/1-2.jpg" alt="CPU结构功能图"></p>
<h3 id="二八定律"><a href="#二八定律" class="headerlink" title="二八定律"></a>二八定律</h3><p>计算机80%的运行时间，用于执行20%的指令</p>
<h3 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h3><p>系统中某部件因采用某种更快执行方法后，整个系统性能的提高与这种执行方式使用频率或占总执行时间的比例有关。</p>
<p>Amdahl定律定义了加速比：<br><img src="/2017/04/09/科学学习计算机系统结构/1-3.jpg" alt="处理机模型"></p>
<p>加速比与两个因素有关：<br><img src="/2017/04/09/科学学习计算机系统结构/1-4.jpg" alt="处理机模型"></p>
<h3 id="CPU中的主要寄存器"><a href="#CPU中的主要寄存器" class="headerlink" title="CPU中的主要寄存器"></a>CPU中的主要寄存器</h3><h4 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h4><h5 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h5><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>AX</td>
<td>Accumulator</td>
<td>累加寄存器，也称之为累加器</td>
</tr>
<tr>
<td>BX</td>
<td>Base</td>
<td>基地址寄存器</td>
</tr>
<tr>
<td>CX</td>
<td>Count</td>
<td>计数器寄存器</td>
</tr>
<tr>
<td>DX</td>
<td>Data</td>
<td>数据寄存器</td>
</tr>
</tbody>
</table>
<h5 id="指针寄存器"><a href="#指针寄存器" class="headerlink" title="指针寄存器"></a>指针寄存器</h5><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>SP</td>
<td>Stack Pointer</td>
<td>堆栈指针寄存器</td>
</tr>
<tr>
<td>BP</td>
<td>Base Pointer</td>
<td>基指针寄存器</td>
</tr>
</tbody>
</table>
<h5 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h5><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>SI</td>
<td>Source Index</td>
<td>源变址寄存器</td>
</tr>
<tr>
<td>DI</td>
<td>Destination Index</td>
<td>目的变址寄存器</td>
</tr>
</tbody>
</table>
<h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>IP</td>
<td>Instruction Pointer</td>
<td>指令指针寄存器</td>
</tr>
</tbody>
</table>
<h4 id="FLAG标志寄存器"><a href="#FLAG标志寄存器" class="headerlink" title="FLAG标志寄存器"></a>FLAG标志寄存器</h4><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>=1</th>
<th>=0</th>
</tr>
</thead>
<tbody>
<tr>
<td>CF</td>
<td>进位标志Carry Flag</td>
<td>CY/Carry/进位</td>
<td>NC/No Carry/无进位</td>
</tr>
<tr>
<td>PF</td>
<td>奇偶标志Parity Flag</td>
<td>PE/Parity Even/偶</td>
<td>PO/Parity Odd/奇</td>
</tr>
<tr>
<td>AF</td>
<td>辅助进位标志Auxiliary Carry Flag</td>
<td>AC/Auxiliary Carry/进位</td>
<td>NA/No Auxiliary Carry/无进位</td>
</tr>
<tr>
<td>ZF</td>
<td>零标志Zero Flag</td>
<td>ZR/Zero/等于零</td>
<td>NZ/Not Zero/不等于零</td>
</tr>
<tr>
<td>SF</td>
<td>符号标志Sign Flag</td>
<td>NG/Negative/负</td>
<td>PL/Positive/非负</td>
</tr>
<tr>
<td>TF</td>
<td>跟踪标志Trace Flag</td>
</tr>
<tr>
<td>IF</td>
<td>中断标志Interrupt Flag</td>
<td>EI/Enable Interrupt/允许</td>
<td>DI/Disable Interrupt/禁止</td>
</tr>
<tr>
<td>DF</td>
<td>方向标志Direction Flag</td>
<td>DN/Down/减少</td>
<td>UP/增加</td>
</tr>
<tr>
<td>OF</td>
<td>溢出标志Overflow Flag</td>
<td>OV/Overflow/溢出</td>
<td>NV/Not Overflow/未溢出</td>
</tr>
</tbody>
</table>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>CS</td>
<td>Code Segment</td>
<td>代码段寄存器</td>
</tr>
<tr>
<td>DS</td>
<td>Data Segment</td>
<td>数据段寄存器</td>
</tr>
<tr>
<td>SS</td>
<td>Stack Segment</td>
<td>堆栈段寄存器</td>
</tr>
<tr>
<td>ES</td>
<td>Extra Segment</td>
<td>附加段寄存器</td>
</tr>
</tbody>
</table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>指令优化：Huffman（哈夫曼）树</p>
<h2 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h2><p>个人理解，随意琢磨</p>
<h3 id="如何实现在存储体中同时读取多个内存单元的数据？"><a href="#如何实现在存储体中同时读取多个内存单元的数据？" class="headerlink" title="如何实现在存储体中同时读取多个内存单元的数据？"></a>如何实现在存储体中同时读取多个内存单元的数据？</h3><h3 id="基本寻址方式及其效率"><a href="#基本寻址方式及其效率" class="headerlink" title="基本寻址方式及其效率"></a>基本寻址方式及其效率</h3><h4 id="寻址方式介绍"><a href="#寻址方式介绍" class="headerlink" title="寻址方式介绍"></a>寻址方式介绍</h4><p>计算机组成原理原理P124</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>算法</th>
<th>主要优点</th>
<th>主要缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>隐含寻址</td>
<td>操作数在专用寄存器</td>
<td>无存储器访问</td>
<td>数据范围有限</td>
</tr>
<tr>
<td>立即寻址</td>
<td>操作数=A</td>
<td>无存储器访问</td>
<td>操作数幅值有限</td>
</tr>
<tr>
<td>直接寻址</td>
<td>EA=A</td>
<td>简单</td>
<td>地址范围有限</td>
</tr>
<tr>
<td>间接寻址</td>
<td>EA=(A)</td>
<td>大的地址范围</td>
<td>多重存储器访问</td>
</tr>
<tr>
<td>寄存器寻址</td>
<td>EA=R</td>
<td>无存储器访问</td>
<td>地址范围有限</td>
</tr>
<tr>
<td>寄存器间接寻址</td>
<td>EA=(R)</td>
<td>大的地址范围</td>
<td>额外存储器访问</td>
</tr>
<tr>
<td>偏移寻址</td>
<td>EA=A+(R)</td>
<td>灵活</td>
<td>复杂</td>
</tr>
<tr>
<td>堆栈寻址</td>
<td>EA=栈顶</td>
<td>无存储器访问</td>
<td>应用有限</td>
</tr>
</tbody>
</table>
<p>数据来源主要有<strong>指令</strong>、<strong>寄存器</strong>、<strong>内存</strong>和<strong>堆栈</strong></p>
<h4 id="数据获取方式"><a href="#数据获取方式" class="headerlink" title="数据获取方式"></a>数据获取方式</h4><p>寄存器：只需要找到相关位置并读取<br>内存： 通过存储控制器到内存中找到数据并获取<br>指令（代码）：需要进行编译后再参与到计算</p>
<p>实际效果可以通过代码实验测试（略）</p>
<h3 id="内存编制"><a href="#内存编制" class="headerlink" title="内存编制"></a>内存编制</h3><p>内存编制方式有<strong>统一编址</strong>和<strong>独立编址</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cache命中率分析]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/30/Cache%E5%91%BD%E4%B8%AD%E7%8E%87%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>对Linux系统的Cache命中率进行分析，使用的是Ubuntu-16.04.2-desktop-amd64系统。<br><a href="http://releases.ubuntu.com/16.04.2/ubuntu-16.04.2-desktop-amd64.iso" target="_blank" rel="external">Ubuntu-16.04.2-desktop-amd64 下载地址</a></p>
<h2 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h2><p><a href="http://valgrind.org/" target="_blank" rel="external">Valgrind</a></p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Valgrind is an instrumentation framework for building dynamic analysis tools.<br>There are Valgrind tools that can automatically detect many <strong>memory management</strong> and threading bugs, and profile your programs in detail.<br>You can also use Valgrind to build new tools.</p>
<h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>Current Release: <a href="http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2" target="_blank" rel="external">Valgrind 3.12.0</a><br>Release on 20 October 2016</p>
<h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><p><a href="http://valgrind.org/docs/manual/QuickStart.html" target="_blank" rel="external">The Valgrind Quick Start Guide</a> Release 3.12.0 20 October 2016<br><a href="http://valgrind.org/docs/manual/manual.html" target="_blank" rel="external">Valgrind User Manual</a> Release 3.12.0 20 October 2016</p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><blockquote>
<p>配置中需要使用autoconf工具<br>安装方法：</p>
<ul>
<li>在终端输入 sudo apt-get install autoconf</li>
<li>输入密码</li>
<li>Do you want to continue?[Y/n]  输入Y</li>
<li>完成后，输入 which autoconf 检查是否安装成功</li>
</ul>
</blockquote>
<p><img src="/2017/03/30/Cache命中率分析/1.jpg" alt="autoconf安装"><br><img src="/2017/03/30/Cache命中率分析/2.jpg" alt="autoconf安装"></p>
<ul>
<li>下载 <a href="http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2" target="_blank" rel="external">Valgrind 3.12.0</a></li>
<li>解压 <strong>valgrind-3.12.0.tar.bz2</strong><pre><code>~$ tar -xjvf valgrind-3.12.0.tar.bz2
</code></pre></li>
<li>解压完成后，进入文件根目录<pre><code>~$ cd valgrind-3.12.0
</code></pre></li>
<li>运行./autogen.sh来设置环境（需要autoconf工具）<pre><code>~/valgrind-3.12.0$ ./autogen.sh
</code></pre><img src="/2017/03/30/Cache命中率分析/3.jpg" alt="autoconf安装"></li>
<li>运行./configure来生成Makefile文件，后面的参数是安装路径（约1分钟）<pre><code>~/valgrind-3.12.0$ ./configure --prefix=/usr/local/valgrind
</code></pre></li>
<li>运行 make 进行编译<pre><code>~/valgrind-3.12.0$ make
</code></pre></li>
<li>运行 sudo make install，输入密码后进行编译<pre><code>~/valgrind-3.12.0$ sudo make install
</code></pre><img src="/2017/03/30/Cache命中率分析/4.jpg" alt="autoconf安装"></li>
</ul>
<p>安装完成，但是为了使用方便，不用每次都到安装目录中去，所以对环境变量Path进行配置</p>
<ul>
<li>在Terminal输入<pre><code>~$ sudo gedit ~/.bashrc
</code></pre></li>
<li>输入密码，打开文件修改，在最后加入<pre><code>export PATH=${PATH}:/usr/local/valgrind/bin
</code></pre></li>
<li>更新<pre><code>~$ sudo source ~/.bashrc
</code></pre></li>
<li>使用测试命令进行测试<pre><code>~$ valgrind ls -l
</code></pre><img src="/2017/03/30/Cache命中率分析/5.jpg" alt="autoconf安装"></li>
</ul>
<p>至此，所有的安装和配置全部完成。耗时约在10-15分钟。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>编写一个测试程序（C语言），代码如下</p>
<pre class="line-numbers language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

    <span class="token macro property">#<span class="token directive keyword">define</span> SIZE 100</span>

    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> array<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译测试程序，并使用valgrind测试命中率</p>
<pre><code>~$ gcc -o test cacheTest1.c
~$ valgrind --tool=cachegrind test
</code></pre><p>测试结果如下：<br><img src="/2017/03/30/Cache命中率分析/6.jpg" alt="autoconf安装"></p>
<pre><code>==23900== Cachegrind, a cache and branch-prediction profiler
==23900== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Nicholas Nethercote et al.
==23900== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==23900== Command: test
==23900== 
--23900-- warning: L3 cache found, using its data for the LL simulation.
==23900== 
==23900== I   refs:      199,256
==23900== I1  misses:      1,040
==23900== LLi misses:      1,016
==23900== I1  miss rate:    0.52%
==23900== LLi miss rate:    0.51%
==23900== 
==23900== D   refs:       65,643  (50,550 rd   + 15,093 wr)
==23900== D1  misses:      3,301  ( 2,682 rd   +    619 wr)
==23900== LLd misses:      2,638  ( 2,079 rd   +    559 wr)
==23900== D1  miss rate:     5.0% (   5.3%     +    4.1%  )
==23900== LLd miss rate:     4.0% (   4.1%     +    3.7%  )
==23900== 
==23900== LL refs:         4,341  ( 3,722 rd   +    619 wr)
==23900== LL misses:       3,654  ( 3,095 rd   +    559 wr)
==23900== LL miss rate:      1.4% (   1.2%     +    3.7%  )
</code></pre><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>I1 —– independent first-level<br>D1 —– data caches<br>L2 —– unified second-level cache<br>LL —– last-level caches</p>
<p>Ir —– I cache reads<br>I1mr — I1 cache read misses<br>ILmr — LL cache instruction read misses<br>Dr —– D cache reads<br>D1mr — D1 cache read misses<br>DLmr — LL cache data read misses<br>Dw —– D cache writes<br>D1mw — D1 cache write misses<br>DLmw — LL cache data write misses</p>
<p>Bc —– conditional branches executed<br>Bcm —- conditional branches mispredicted<br>Bi —– indirect branches executed<br>Bim —- indirect branches mispredicted</p>
<h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><p>D1 = D1mr + D1mw<br>LL = ILmr + DLmr + DLmw</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>查看本机cache信息</p>
<pre><code>~$ cat /sys/devices/system/cpu/cpu0/cache/index0/size
</code></pre><p>其中 index0 可替换为index1-3; size 可替换为level, type</p>
<table>
<thead>
<tr>
<th>index</th>
<th>level</th>
<th>type</th>
<th>size</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>Data</td>
<td>32K</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>Instruction</td>
<td>32K</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>Unified</td>
<td>256K</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>Unified</td>
<td>6144K</td>
</tr>
</tbody>
</table>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><pre><code>E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?
</code></pre><p>解决方案：<br>在使用多个Ubuntu的虚拟机时会遇到锁的问题，逐行输入以下代码即可</p>
<pre><code>sudo rm -rf /var/lib/dpkg/lock 
sudo rm -rf /var/cache/apt/archives/lock 
sudo apt-get update 
sudo dpkg –configure -a
</code></pre>]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统结构 </tag>
            
            <tag> cache </tag>
            
            <tag> valgrind </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中xml文件解析分析]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/29/Java%E4%B8%ADxml%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>java中目前有四种解析xml文件的解析方式：DOM、SAX、JDOM、DOM4J</p>
<h2 id="解析方式分析"><a href="#解析方式分析" class="headerlink" title="解析方式分析"></a>解析方式分析</h2><p>基础方法：</p>
<ul>
<li>DOM: 平台无关的官方解析方式</li>
<li>SAX: 基于事件驱动的解析方式</li>
</ul>
<p>扩展方法（只有java平台可以使用）：</p>
<ul>
<li>JDOM：</li>
<li>DOM4J：</li>
</ul>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM解析时，一次性将xml文件全部加入内存</p>
<p><strong>优点</strong></p>
<ul>
<li>树结构，直观，容易编写</li>
<li>树结构保存在内存中，便于修改</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>内存消耗大，影响解析性能，内存容易溢出</li>
</ul>
<hr>
<h3 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h3><p>逐标签解析</p>
<p><strong>优点</strong></p>
<ul>
<li>事件驱动，内存消耗小</li>
<li>仅适用于处理xml数据</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>不易编码</li>
<li>难以同时访问多处不同数据</li>
</ul>
<hr>
<h3 id="JDOM"><a href="#JDOM" class="headerlink" title="JDOM"></a>JDOM</h3><ul>
<li>使用具体类而不用接口</li>
<li>API大量使用Collections类</li>
</ul>
<hr>
<h3 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h3><ul>
<li>使用接口和抽象基本方法</li>
<li>JDOM智能分支</li>
<li>性能优异、灵活性好</li>
</ul>
<hr>
<h2 id="具体性能分析"><a href="#具体性能分析" class="headerlink" title="具体性能分析"></a>具体性能分析</h2><p>根据文件大小不同进行性能分析，对同一文件进行完全解析的时间进行比较（单位ms）</p>
<h4 id="xml大小为-1kb"><a href="#xml大小为-1kb" class="headerlink" title="xml大小为 1kb"></a>xml大小为 1kb</h4><pre><code>DOM性能：43
SAX性能：6
JDOM性能：48
DOM4J性能：45
</code></pre><h4 id="xml大小为-100kb"><a href="#xml大小为-100kb" class="headerlink" title="xml大小为 100kb"></a>xml大小为 100kb</h4><pre><code>DOM性能：89
SAX性能：32
JDOM性能：109
DOM4J性能：74
</code></pre><h4 id="xml大小为-600kb"><a href="#xml大小为-600kb" class="headerlink" title="xml大小为 600kb"></a>xml大小为 600kb</h4><pre><code>DOM性能：115
SAX性能：54
JDOM性能：209
DOM4J性能：149
</code></pre><h4 id="xml大小为-1MB"><a href="#xml大小为-1MB" class="headerlink" title="xml大小为 1MB"></a>xml大小为 1MB</h4><pre><code>DOM性能：162
SAX性能：80
JDOM性能：205
DOM4J性能：131
</code></pre><h4 id="xml大小为-5MB（测试结果不稳定）"><a href="#xml大小为-5MB（测试结果不稳定）" class="headerlink" title="xml大小为 5MB（测试结果不稳定）"></a>xml大小为 5MB（测试结果不稳定）</h4><pre><code>性能测试结果1：
    DOM性能：693
    SAX性能：142
    JDOM性能：529
    DOM4J性能：453
性能测试结果2：
    DOM性能：772
    SAX性能：161
    JDOM性能：496
    DOM4J性能：546
性能测试结果3：
    DOM性能：674
    SAX性能：155
    JDOM性能：414
    DOM4J性能：506
性能测试结果4：
    DOM性能：677
    SAX性能：169
    JDOM性能：447
    DOM4J性能：438
</code></pre><p>综上，SAX对全文件的解析速度最快，JDOM的解析速度最慢，而DOM和DOM4J的解析性能取决于文件，当文件大小达到1MB以上时，DOM4J的分析性能优于DOM，因此根据文件大小和具体使用情况选择不同的解析方式。</p>
<p>当文件大小达到5MB时，性能测试结果浮动偏差较大，DOM、JDOM、DOM4J这三种解析方式的性能强弱处于不稳定状态，虽然每次测试的文件都是一样的，但是为什么会发生这种情况还不太了解。</p>
<h3 id="解析方式选择"><a href="#解析方式选择" class="headerlink" title="解析方式选择"></a>解析方式选择</h3><ol>
<li><p>在网站开发中，如果发布一条公告使用xml文件格式，可以采用DOM解析。公告的内容较少，所以文件大小不大，并且对不同节点进行修改也较为方便。</p>
</li>
<li><p>选择性数据读取时，不适合选择SAX解析方式，如根据某一产品型号，获取其名称等。</p>
</li>
<li><p>对于复杂的xml文档适合采用DOM4J。</p>
</li>
</ol>
<blockquote>
<p>Hibernate的xml解析方式采用的是DOM4J</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> xml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[专业课软件下载]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/27/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h2><h3 id="VMware-Workstation"><a href="#VMware-Workstation" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h3><ul>
<li>VMware Workstation 10 for Windows <a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-10.0.4-2249910.exe" target="_blank" rel="external">下载地址</a></li>
<li>VMware Workstation 10 for Linux（32 位）<a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle" target="_blank" rel="external">下载地址</a></li>
<li>VMware Workstation 10 for Linux（64 位）<a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.x86_64.bundle" target="_blank" rel="external">下载地址</a></li>
</ul>
<p>激活序列号（请支持正版）：<br>JZ6WK-4529P-HZAA1-9RAG6-33JNR<br>5F4EV-4Z0DP-XZHN9-0L95H-02V17</p>
<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>CentOS<a href="https://www.centos.org/" target="_blank" rel="external">官方网站</a>，可以查找各种版本，不过官网不提供直接下载，需要通过镜像下载</p>
<p>官网提供的<a href="http://101.96.10.27/vault.centos.org/6.5/isos/x86_64/CentOS-6.5-x86_64-LiveCD.iso" target="_blank" rel="external">镜像网站地址</a></p>
<p>我使用的是 <a href="http://mirror.symnds.com/distributions/CentOS-vault/" target="_blank" rel="external">http://mirror.symnds.com/distributions/CentOS-vault/</a> ，亲测可用</p>
<ul>
<li>进入后先选择版本，如6.5</li>
<li>选择isos</li>
<li>再选择处理器，如（x86_64)</li>
<li>最后选择所需镜像（根据实验要求，选择CentOS-6.5-x86_64-LiveCD.iso），里面还提供了md5码校验</li>
</ul>
<p><a href="http://mirror.symnds.com/distributions/CentOS-vault/6.5/isos/x86_64/CentOS-6.5-x86_64-LiveCD.iso" target="_blank" rel="external">直接下载地址</a></p>
<h3 id="SSH-Secure-Shell-Client-3-2-9"><a href="#SSH-Secure-Shell-Client-3-2-9" class="headerlink" title="SSH Secure Shell Client 3.2.9"></a>SSH Secure Shell Client 3.2.9</h3><p><a href="http://down10.zol.com.cn/yuanchenggongju/SSHSecureShellClient3.2.9.zip" target="_blank" rel="external">下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统结构 </tag>
            
            <tag> 软件下载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM垃圾回收方式]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/26/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="JVM垃圾回收方式"><a href="#JVM垃圾回收方式" class="headerlink" title="JVM垃圾回收方式"></a>JVM垃圾回收方式</h2><p>JVM垃圾回收方式分为 <strong>复制算法</strong> 和 <strong>标记清理算法</strong></p>
<p><strong>复制算法</strong>：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法；<br><strong>标记清理算法</strong>：一块区域，标记要回收的对象，然后回收，一定会出现碎片，那么引出；<br><strong>标记-整理算法</strong>：多了碎片整理，整理出更大的内存放更大的对象。</p>
<p><strong>Serial New收集器</strong>，是针对新生代的收集器，采用的是复制算法；<br><strong>Parallel New（并行）收集器</strong>，新生代采用复制算法，老年代采用标记整理；<br><strong>Parallel Scavenge（并行）收集器</strong>，针对新生代，采用复制收集算法；<br><strong>Serial Old（串行）收集器</strong>，新生代采用复制，老年代采用标记整理；<br><strong>Parallel Old（并行）收集器</strong>，针对老年代，标记整理；<br><strong>CMS收集器</strong>，基于标记清理；<br><strong>G1收集器</strong>：整体上是基于标记-整理 ，局部采用复制；</p>
<hr>
<p><strong>新生代基本采用复制算法<br>老年代采用标记整理算法<br>cms采用标记清理</strong></p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Material主题的改造]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/23/Material%E4%B8%BB%E9%A2%98%E7%9A%84%E6%94%B9%E9%80%A0/</url>
      <content type="html"><![CDATA[<p>我的博客就是基于hexo-theme-material主题进行改造的，我不是前端攻城狮，所以写的烂，仅供参考，请勿吐槽……</p>
<p><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">material主题源码</a><br><a href="https://material.viosey.com/" target="_blank" rel="external">material食用说明书</a></p>
<h2 id="首页文章添加标签"><a href="#首页文章添加标签" class="headerlink" title="首页文章添加标签"></a>首页文章添加标签</h2><ul>
<li>在主题文件夹 layout_partial 内找到 Paradox-post_entry.ejs 文件</li>
<li>找到</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Category --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_entry-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">list_categories(post.categories,</span> <span class="token attr-name">{</span>
            <span class="token attr-name"><span class="token namespace">show_count:</span></span> <span class="token attr-name">false,</span>
            <span class="token attr-name"><span class="token namespace">class:</span></span> <span class="token attr-name">'post_tag',</span>
            <span class="token attr-name"><span class="token namespace">style:</span></span> <span class="token attr-name">'none'</span>
        <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是显示分类的代码</p>
<ul>
<li>在这段代码前添加</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Tags --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_entry-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">list_tags(post.tags,</span> <span class="token attr-name">{</span>
            <span class="token attr-name"><span class="token namespace">show_count:</span></span> <span class="token attr-name">false,</span>
            <span class="token attr-name"><span class="token namespace">class:</span></span> <span class="token attr-name">'post_category',</span>
            <span class="token attr-name"><span class="token namespace">style:</span></span> <span class="token attr-name">'none'</span>
        <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一段就是添加标签的代码，第10行是“|”分割符，用于分割标签和分类</p>
<h2 id="代码高亮染色"><a href="#代码高亮染色" class="headerlink" title="代码高亮染色"></a>代码高亮染色</h2><p>可以参考<a href="https://material.viosey.com/expert/" target="_blank" rel="external">官方文档</a>安装插件 <strong>hexo-prism-plugin</strong></p>
<p>安装指令： <strong>npm i -S hexo-prism-plugin</strong></p>
<p>但是基于这个插件的文档虽然可以染色，但是在代码行数标注方面有不少bug，所以在该插件的基础上又进行了一定的优化（至少比原来稍微好看一点）</p>
<p>经实测，在Material主题下，只有”coy”主题会显示代码行数，但是显示的位置很奇怪，所以就选择该主题对代码样式进行修改，主要修改两处</p>
<p>在<strong>站点目录</strong>下，找到路径 \node_modules\prismjs\plugins\line-numbers 中 prism-line-numbers.css文件并打开</p>
<p>将</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token selector"><span class="token class">.line-numbers</span> <span class="token class">.line-numbers-rows</span> </span><span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
        <span class="token property">padding-left</span><span class="token punctuation">:</span> -<span class="token number">3.8</span>em<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">3.2</span>em<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* works for line-numbers below 1000 lines */</span>
        <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>
        <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>

        <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>中的 width 属性进行修改，该属性是代码行数的宽度，我将其修改为2em</p>
<p>在<strong>主题目录</strong>下，找到路径 \source\css 中的 style.css 文件并打开</p>
<p>将</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token selector"><span class="token id">#post-content</span> pre </span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f7f7f7</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">19</span>px<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>中的 padding 属性进行修改，该属性是代码块的四周内间距，原css样式设置为上下左右都为16px，我将其修改为</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">16</span>px <span class="token number">0</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使其左右间距为0，上下间距还是保持16px</p>
<p>最终样式如本文所示，虽然感觉还是不那么好看，但是比原来的好看</p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> material </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编程训练]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/22/%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/</url>
      <content type="html"><![CDATA[<h3 id="在线编程网址"><a href="#在线编程网址" class="headerlink" title="在线编程网址"></a>在线编程网址</h3><ul>
<li><a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a><br>听说很适合找实习的做，每道题里面也有题解，以及运行速度比较。</li>
<li><a href="http://codeforces.com/" target="_blank" rel="external">Codeforces</a><br>很早以前注册过账号（<del>然后再也没动过</del>）</li>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网nowcoder</a><br>这个网上也有很多题目，有的也比较经典（<del>甚至还搬了很多OJ题目</del>），也有面试笔试会考的题目，只要不是靠算法什么的，题目都不会很难</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Codeforces </tag>
            
            <tag> nowcoder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java关系模式]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/22/Java%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>先开一个坑，学习关系模式的时候做笔记</p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li>开闭原则（Open Close Principle）：对扩展开放，对修改关闭</li>
<li>里氏代换原则（Liskov Substitution Principle）：调用父类，子类也可以运行</li>
<li>依赖倒转原则（Dependence Inversion Principle）：子类替换父类，程序行为无变化</li>
<li>接口隔离原则（Interface Segregation Principle）：一个接口一个角色</li>
<li>合成/聚合复用原则（Composite Reuse Principle）：新对象 = 新对象 + 旧对象，避免继承</li>
<li>最少知识原则（Demeter Principle）：对象之间相互独立</li>
</ul>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>创建型模式(5种)：</p>
<ul>
<li>工厂方法模式（Factory Method）</li>
<li>抽象工厂模式（Abstract Factory）</li>
<li>单例模式（Singleton）</li>
<li>建造者模式（Builder）</li>
<li>原型模式（Prototype）</li>
</ul>
<p>结构型模式(7种)：</p>
<ul>
<li>适配器模式（Adapter）</li>
<li>装饰器模式（Decorator）</li>
<li>代理模式（Proxy）</li>
<li>外观模式（Facade）</li>
<li>桥接模式（Bridge）</li>
<li>组合模式（Composite）</li>
<li>享元模式（Flyweight）</li>
</ul>
<p>行为型模式(11种)</p>
<ul>
<li>策略模式（strategy）</li>
<li>模板方法模式（Template Method）</li>
<li>观察者模式（Observer）</li>
<li>迭代子模式（Iterator）</li>
<li>责任链模式（Chain of Responsibility）</li>
<li>命令模式（Command）</li>
<li>备忘录模式（Memento）</li>
<li>状态模式（State）</li>
<li>访问者模式（Visitor）</li>
<li>中介者模式（Mediator）</li>
<li>解释器模式（Interpreter）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系模式 </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实习相关]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/22/%E5%AE%9E%E4%B9%A0%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>我也不知道写什么好<code>_(:зゝ∠)_</code>，先编一份简历出来吧。<br>不过，首先还要找一份合适的模板。</p>
<p>有的内推群会给内推机会，有机会可以去看看。作为程序猿的话，推广自己最好的平台莫过于github了吧。</p>
<h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><ul>
<li><a href="http://www.zhiyeapp.com/" target="_blank" rel="external">知页</a><br>在线制作简历，只要填空就好了</li>
<li>各类求职网站，也可以制作简历，并且可以直接导出。</li>
</ul>
<h2 id="实习关注"><a href="#实习关注" class="headerlink" title="实习关注"></a>实习关注</h2><ul>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网</a><br>我也不知道是怎么找到这个网站的，不过里面有很多实习单位的笔试真题，还有专项训练什么可以做做看，了解下自己的水平也是不错的</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习&amp;工作WORK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 内推 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
