<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[科学学习计算机系统结构]]></title>
      <url>https://stevenxiaoming.github.io/2017/04/09/%E7%A7%91%E5%AD%A6%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><h3 id="1-1-洋葱模型"><a href="#1-1-洋葱模型" class="headerlink" title="1.1 洋葱模型"></a>1.1 洋葱模型</h3><p><img src="/2017/04/09/科学学习计算机系统结构/1-1.jpg" alt="洋葱模型"></p>
<h3 id="1-2-处理机模型"><a href="#1-2-处理机模型" class="headerlink" title="1.2 处理机模型"></a>1.2 处理机模型</h3><p><img src="/2017/04/09/科学学习计算机系统结构/1-2.jpg" alt="处理机模型"></p>
<h3 id="1-3-Amdahl定律"><a href="#1-3-Amdahl定律" class="headerlink" title="1.3 Amdahl定律"></a>1.3 Amdahl定律</h3><p>系统中某部件因采用某种更快执行方法后，整个系统性能的提高与这种执行方式使用频率或占总执行时间的比例有关。</p>
<p>Amdahl定律定义了加速比：<br><img src="/2017/04/09/科学学习计算机系统结构/1-3.jpg" alt="处理机模型"></p>
<p>加速比与两个因素有关：<br><img src="/2017/04/09/科学学习计算机系统结构/1-4.jpg" alt="处理机模型"></p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cache命中率分析]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/30/Cache%E5%91%BD%E4%B8%AD%E7%8E%87%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>对linux系统的Cache命中率进行分析，使用的是Ubuntu-16.04.2-desktop-amd64系统。<br><a href="http://releases.ubuntu.com/16.04.2/ubuntu-16.04.2-desktop-amd64.iso" target="_blank" rel="external">Ubuntu-16.04.2-desktop-amd64 下载地址</a></p>
<h2 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h2><p><a href="http://valgrind.org/" target="_blank" rel="external">Valgrind</a></p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Valgrind is an instrumentation framework for building dynamic analysis tools.<br>There are Valgrind tools that can automatically detect many <strong>memory management</strong> and threading bugs, and profile your programs in detail.<br>You can also use Valgrind to build new tools.</p>
<h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>Current Release: <a href="http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2" target="_blank" rel="external">Valgrind 3.12.0</a><br>Release on 20 October 2016</p>
<h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><p><a href="http://valgrind.org/docs/manual/QuickStart.html" target="_blank" rel="external">The Valgrind Quick Start Guide</a> Release 3.12.0 20 October 2016<br><a href="http://valgrind.org/docs/manual/manual.html" target="_blank" rel="external">Valgrind User Manual</a> Release 3.12.0 20 October 2016</p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><blockquote>
<p>配置中需要使用autoconf工具<br>安装方法：</p>
<ul>
<li>在终端输入 sudo apt-get install autoconf</li>
<li>输入密码</li>
<li>Do you want to continue?[Y/n]  输入Y</li>
<li>完成后，输入 which autoconf 检查是否安装成功</li>
</ul>
</blockquote>
<p><img src="/2017/03/30/Cache命中率分析/1.jpg" alt="autoconf安装"><br><img src="/2017/03/30/Cache命中率分析/2.jpg" alt="autoconf安装"></p>
<ul>
<li>下载 <a href="http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2" target="_blank" rel="external">Valgrind 3.12.0</a></li>
<li>解压 <strong>valgrind-3.12.0.tar.bz2</strong><pre><code>~$ tar -xjvf valgrind-3.12.0.tar.bz2
</code></pre></li>
<li>解压完成后，进入文件根目录<pre><code>~$ cd valgrind-3.12.0
</code></pre></li>
<li>运行./autogen.sh来设置环境（需要autoconf工具）<pre><code>~/valgrind-3.12.0$ ./autogen.sh
</code></pre><img src="/2017/03/30/Cache命中率分析/3.jpg" alt="autoconf安装"></li>
<li>运行./configure来生成Makefile文件，后面的参数是安装路径（约1分钟）<pre><code>~/valgrind-3.12.0$ ./configure --prefix=/usr/local/valgrind
</code></pre></li>
<li>运行 make 进行编译<pre><code>~/valgrind-3.12.0$ make
</code></pre></li>
<li>运行 sudo make install，输入密码后进行编译<pre><code>~/valgrind-3.12.0$ sudo make install
</code></pre><img src="/2017/03/30/Cache命中率分析/4.jpg" alt="autoconf安装"></li>
</ul>
<p>安装完成，但是为了使用方便，不用每次都到安装目录中去，所以对环境变量Path进行配置</p>
<ul>
<li>在Terminal输入<pre><code>~$ sudo gedit ~/.bashrc
</code></pre></li>
<li>输入密码，打开文件修改，在最后加入<pre><code>export PATH=${PATH}:/usr/local/valgrind/bin
</code></pre></li>
<li>更新<pre><code>~$ sudo source ~/.bashrc
</code></pre></li>
<li>使用测试命令进行测试<pre><code>~$ valgrind ls -l
</code></pre><img src="/2017/03/30/Cache命中率分析/5.jpg" alt="autoconf安装"></li>
</ul>
<p>至此，所有的安装和配置全部完成。耗时约在10-15分钟。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>编写一个测试程序（C语言），代码如下</p>
<pre class="line-numbers language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

    <span class="token macro property">#<span class="token directive keyword">define</span> SIZE 100</span>

    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> array<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译测试程序，并使用valgrind测试命中率</p>
<pre><code>~$ gcc -o test cacheTest1.c
~$ valgrind --tool=cachegrind test
</code></pre><p>测试结果如下：<br><img src="/2017/03/30/Cache命中率分析/6.jpg" alt="autoconf安装"></p>
<pre><code>==23900== Cachegrind, a cache and branch-prediction profiler
==23900== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Nicholas Nethercote et al.
==23900== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==23900== Command: test
==23900== 
--23900-- warning: L3 cache found, using its data for the LL simulation.
==23900== 
==23900== I   refs:      199,256
==23900== I1  misses:      1,040
==23900== LLi misses:      1,016
==23900== I1  miss rate:    0.52%
==23900== LLi miss rate:    0.51%
==23900== 
==23900== D   refs:       65,643  (50,550 rd   + 15,093 wr)
==23900== D1  misses:      3,301  ( 2,682 rd   +    619 wr)
==23900== LLd misses:      2,638  ( 2,079 rd   +    559 wr)
==23900== D1  miss rate:     5.0% (   5.3%     +    4.1%  )
==23900== LLd miss rate:     4.0% (   4.1%     +    3.7%  )
==23900== 
==23900== LL refs:         4,341  ( 3,722 rd   +    619 wr)
==23900== LL misses:       3,654  ( 3,095 rd   +    559 wr)
==23900== LL miss rate:      1.4% (   1.2%     +    3.7%  )
</code></pre><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>I1 —– independent first-level<br>D1 —– data caches<br>L2 —– unified second-level cache<br>LL —– last-level caches</p>
<p>Ir —– I cache reads<br>I1mr — I1 cache read misses<br>ILmr — LL cache instruction read misses<br>Dr —– D cache reads<br>D1mr — D1 cache read misses<br>DLmr — LL cache data read misses<br>Dw —– D cache writes<br>D1mw — D1 cache write misses<br>DLmw — LL cache data write misses</p>
<p>Bc —– conditional branches executed<br>Bcm —- conditional branches mispredicted<br>Bi —– indirect branches executed<br>Bim —- indirect branches mispredicted</p>
<h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><p>D1 = D1mr + D1mw<br>LL = ILmr + DLmr + DLmw</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>查看本机cache信息</p>
<pre><code>~$ cat /sys/devices/system/cpu/cpu0/cache/index0/size
</code></pre><p>其中 index0 可替换为index1-3; size 可替换为level, type</p>
<table>
<thead>
<tr>
<th>index</th>
<th>level</th>
<th>type</th>
<th>size</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>Data</td>
<td>32K</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>Instruction</td>
<td>32K</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>Unified</td>
<td>256K</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>Unified</td>
<td>6144K</td>
</tr>
</tbody>
</table>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><pre><code>E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?
</code></pre><p>解决方案：<br>在使用多个Ubuntu的虚拟机时会遇到锁的问题，逐行输入以下代码即可</p>
<pre><code>sudo rm -rf /var/lib/dpkg/lock 
sudo rm -rf /var/cache/apt/archives/lock 
sudo apt-get update 
sudo dpkg –configure -a
</code></pre>]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统结构 </tag>
            
            <tag> cache </tag>
            
            <tag> valgrind </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中xml文件解析分析]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/29/Java%E4%B8%ADxml%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>java中目前有四种解析xml文件的解析方式：DOM、SAX、JDOM、DOM4J</p>
<h2 id="解析方式分析"><a href="#解析方式分析" class="headerlink" title="解析方式分析"></a>解析方式分析</h2><p>基础方法：</p>
<ul>
<li>DOM: 平台无关的官方解析方式</li>
<li>SAX: 基于事件驱动的解析方式</li>
</ul>
<p>扩展方法（只有java平台可以使用）：</p>
<ul>
<li>JDOM：</li>
<li>DOM4J：</li>
</ul>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM解析时，一次性将xml文件全部加入内存</p>
<p><strong>优点</strong></p>
<ul>
<li>树结构，直观，容易编写</li>
<li>树结构保存在内存中，便于修改</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>内存消耗大，影响解析性能，内存容易溢出</li>
</ul>
<hr>
<h3 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h3><p>逐标签解析</p>
<p><strong>优点</strong></p>
<ul>
<li>事件驱动，内存消耗小</li>
<li>仅适用于处理xml数据</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>不易编码</li>
<li>难以同时访问多处不同数据</li>
</ul>
<hr>
<h3 id="JDOM"><a href="#JDOM" class="headerlink" title="JDOM"></a>JDOM</h3><ul>
<li>使用具体类而不用接口</li>
<li>API大量使用Collections类</li>
</ul>
<hr>
<h3 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h3><ul>
<li>使用接口和抽象基本方法</li>
<li>JDOM智能分支</li>
<li>性能优异、灵活性好</li>
</ul>
<hr>
<h2 id="具体性能分析"><a href="#具体性能分析" class="headerlink" title="具体性能分析"></a>具体性能分析</h2><p>根据文件大小不同进行性能分析，对同一文件进行完全解析的时间进行比较（单位ms）</p>
<h4 id="xml大小为-1kb"><a href="#xml大小为-1kb" class="headerlink" title="xml大小为 1kb"></a>xml大小为 1kb</h4><pre><code>DOM性能：43
SAX性能：6
JDOM性能：48
DOM4J性能：45
</code></pre><h4 id="xml大小为-100kb"><a href="#xml大小为-100kb" class="headerlink" title="xml大小为 100kb"></a>xml大小为 100kb</h4><pre><code>DOM性能：89
SAX性能：32
JDOM性能：109
DOM4J性能：74
</code></pre><h4 id="xml大小为-600kb"><a href="#xml大小为-600kb" class="headerlink" title="xml大小为 600kb"></a>xml大小为 600kb</h4><pre><code>DOM性能：115
SAX性能：54
JDOM性能：209
DOM4J性能：149
</code></pre><h4 id="xml大小为-1MB"><a href="#xml大小为-1MB" class="headerlink" title="xml大小为 1MB"></a>xml大小为 1MB</h4><pre><code>DOM性能：162
SAX性能：80
JDOM性能：205
DOM4J性能：131
</code></pre><h4 id="xml大小为-5MB（测试结果不稳定）"><a href="#xml大小为-5MB（测试结果不稳定）" class="headerlink" title="xml大小为 5MB（测试结果不稳定）"></a>xml大小为 5MB（测试结果不稳定）</h4><pre><code>性能测试结果1：
    DOM性能：693
    SAX性能：142
    JDOM性能：529
    DOM4J性能：453
性能测试结果2：
    DOM性能：772
    SAX性能：161
    JDOM性能：496
    DOM4J性能：546
性能测试结果3：
    DOM性能：674
    SAX性能：155
    JDOM性能：414
    DOM4J性能：506
性能测试结果4：
    DOM性能：677
    SAX性能：169
    JDOM性能：447
    DOM4J性能：438
</code></pre><p>综上，SAX对全文件的解析速度最快，JDOM的解析速度最慢，而DOM和DOM4J的解析性能取决于文件，当文件大小达到1MB以上时，DOM4J的分析性能优于DOM，因此根据文件大小和具体使用情况选择不同的解析方式。</p>
<p>当文件大小达到5MB时，性能测试结果浮动偏差较大，DOM、JDOM、DOM4J这三种解析方式的性能强弱处于不稳定状态，虽然每次测试的文件都是一样的，但是为什么会发生这种情况还不太了解。</p>
<h3 id="解析方式选择"><a href="#解析方式选择" class="headerlink" title="解析方式选择"></a>解析方式选择</h3><ol>
<li><p>在网站开发中，如果发布一条公告使用xml文件格式，可以采用DOM解析。公告的内容较少，所以文件大小不大，并且对不同节点进行修改也较为方便。</p>
</li>
<li><p>选择性数据读取时，不适合选择SAX解析方式，如根据某一产品型号，获取其名称等。</p>
</li>
<li><p>对于复杂的xml文档适合采用DOM4J。</p>
</li>
</ol>
<blockquote>
<p>Hibernate的xml解析方式采用的是DOM4J</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> xml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[专业课软件下载]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/27/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h2><h3 id="VMware-Workstation"><a href="#VMware-Workstation" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h3><ul>
<li>VMware Workstation 10 for Windows <a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-10.0.4-2249910.exe" target="_blank" rel="external">下载地址</a></li>
<li>VMware Workstation 10 for Linux（32 位）<a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle" target="_blank" rel="external">下载地址</a></li>
<li>VMware Workstation 10 for Linux（64 位）<a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.x86_64.bundle" target="_blank" rel="external">下载地址</a></li>
</ul>
<p>激活序列号（请支持正版）：<br>JZ6WK-4529P-HZAA1-9RAG6-33JNR<br>5F4EV-4Z0DP-XZHN9-0L95H-02V17</p>
<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>CentOS<a href="https://www.centos.org/" target="_blank" rel="external">官方网站</a>，可以查找各种版本，不过官网不提供直接下载，需要通过镜像下载</p>
<p>官网提供的<a href="http://101.96.10.27/vault.centos.org/6.5/isos/x86_64/CentOS-6.5-x86_64-LiveCD.iso" target="_blank" rel="external">镜像网站地址</a></p>
<p>我使用的是 <a href="http://mirror.symnds.com/distributions/CentOS-vault/" target="_blank" rel="external">http://mirror.symnds.com/distributions/CentOS-vault/</a> ，亲测可用</p>
<ul>
<li>进入后先选择版本，如6.5</li>
<li>选择isos</li>
<li>再选择处理器，如（x86_64)</li>
<li>最后选择所需镜像（根据实验要求，选择CentOS-6.5-x86_64-LiveCD.iso），里面还提供了md5码校验</li>
</ul>
<p><a href="http://mirror.symnds.com/distributions/CentOS-vault/6.5/isos/x86_64/CentOS-6.5-x86_64-LiveCD.iso" target="_blank" rel="external">直接下载地址</a></p>
<h3 id="SSH-Secure-Shell-Client-3-2-9"><a href="#SSH-Secure-Shell-Client-3-2-9" class="headerlink" title="SSH Secure Shell Client 3.2.9"></a>SSH Secure Shell Client 3.2.9</h3><p><a href="http://down10.zol.com.cn/yuanchenggongju/SSHSecureShellClient3.2.9.zip" target="_blank" rel="external">下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统结构 </tag>
            
            <tag> 软件下载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM垃圾回收方式]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/26/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="JVM垃圾回收方式"><a href="#JVM垃圾回收方式" class="headerlink" title="JVM垃圾回收方式"></a>JVM垃圾回收方式</h2><p>JVM垃圾回收方式分为 <strong>复制算法</strong> 和 <strong>标记清理算法</strong></p>
<p><strong>复制算法</strong>：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法；<br><strong>标记清理算法</strong>：一块区域，标记要回收的对象，然后回收，一定会出现碎片，那么引出；<br><strong>标记-整理算法</strong>：多了碎片整理，整理出更大的内存放更大的对象。</p>
<p><strong>Serial New收集器</strong>，是针对新生代的收集器，采用的是复制算法；<br><strong>Parallel New（并行）收集器</strong>，新生代采用复制算法，老年代采用标记整理；<br><strong>Parallel Scavenge（并行）收集器</strong>，针对新生代，采用复制收集算法；<br><strong>Serial Old（串行）收集器</strong>，新生代采用复制，老年代采用标记整理；<br><strong>Parallel Old（并行）收集器</strong>，针对老年代，标记整理；<br><strong>CMS收集器</strong>，基于标记清理；<br><strong>G1收集器</strong>：整体上是基于标记-整理 ，局部采用复制；</p>
<hr>
<p><strong>新生代基本采用复制算法<br>老年代采用标记整理算法<br>cms采用标记清理</strong></p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日记拼图1]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/24/%E6%97%A5%E8%AE%B0%E6%8B%BC%E5%9B%BE1/</url>
      <content type="html"><![CDATA[<h1 id="私有文章，暂不公开"><a href="#私有文章，暂不公开" class="headerlink" title="私有文章，暂不公开"></a>私有文章，暂不公开</h1><p>冬季学期一结束，小日子就结束啦！下学期好好做人。</p>
<p>新的学期，每天除了正常学习，就是完成每天的小目标，但愿能够在7月前拿到人生中的第一个offer吧！</p>
]]></content>
      
        <categories>
            
            <category> 生活LIFE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[长大]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/24/%E9%95%BF%E5%A4%A7/</url>
      <content type="html"><![CDATA[<p>寒假，每天晚睡早起，整天趴在电脑前，做着自己的项目，再也没有晚睡晚起，吃喝玩乐来度过整个假期了……</p>
<p>两个星期前的考试周，面对着专业课考试已经毫无感受，不再有往日的紧迫感，也没有往日的勤奋预习……</p>
<p>考试周的时候，周围的同学都开始找实习了，想想也已经大三了，还有一个学期就结束了。曾经觉得实习离我还很遥远，而现在就发生在自己身上。</p>
<p>在春招的茫茫人海中，我也成为了其中的一员，拿着一纸简历，寻找着合适的实习岗位……或许只是为了寻找一份安慰和心理平衡，能和其他人一样找到一份实习，然后花自己实习赚来的钱出去玩！</p>
<p>大概就这样长大了吧。。。。。。</p>
<hr>
<p>前几天和小伙伴聊起了童年的那些事儿，现在想起来慢慢的都是回忆。<br>那时的输入法智能ABC，我还记得我的名字序列是9 1 5；<br>那时的动画片没有喜洋洋和灰太狼，只有蓝猫和淘气；<br>那时的打字练习玩的是警察抓小偷，可是经常被逮到；<br>那时的游戏只玩过超级玛丽，每次玩到第四关就进入了无限循环，怎么都过不去……</p>
<p>我打开电脑的输入法时，只有更智能的搜狗输入法，偶尔还能在学校的机房看到智能ABC；<br>在网上找动画的时候，那些经典的动画全不见踪影，想起当年过节的时候，都是看喜洋洋的电影才知道是什么年，也不知道是什么时候，喜洋洋就不出电影版了；<br>作为一个程序猿，每天的打字练习就是码代码，拼的手速，再也没有以前练习时打的精彩的故事；<br>现在的游戏动不动就是几G或者10+G的大型游戏，使用更优秀的引擎，追求着更高的画质。</p>
<hr>
<p>当我开始书写我的简历的时候，才发现有如此多的空白，我竟然没有什么可以去写，不仅承受着英语的硬伤，还有技术的不精……</p>
<p>学校的知识已经不能满足时代的需求。为了一份实习，或者是一种不愿输给身边的人的攀比心吧。</p>
<p>电脑中的游戏一个接一个的消失，取代的是一段又一段的代码，一个又一个的项目；网页收藏夹里的游戏攻略，变成了实习攻略和在线编程；书架上的教科书，逐渐被一本本的专业书所取代……</p>
<p>从父母看管着学习的中小学，只为考上一个好大学；<br>到自由放纵的大学，只为体验自由自在的生活；<br>再到自己想要学习，只是为了能够在简历上多添一笔……</p>
<hr>
<p>看到别人已经在实习面试，有的甚至已经拿到offer，不甘心自己还和往常一样堕落，开始了好好学习的计划（<del>flag</del>）。</p>
<p>编程、看书、做项目，一个又一个的计划摆上了日程表，6月份还有第N次的六级考，逼着自己去学，不为其他的，就为自己。</p>
<p>以前的计划就如同摆设一样（<del>flag倒</del>），只是提醒自己有这样一个美好的想法，反正还有下次。现在留给自己的大概就只有这一次机会，几个月的时间罢了。</p>
<p>不逼一下自己，怎么知道自己可以有多可怕。</p>
<hr>
<p>看了上次的那篇推文里讲到了年少的学生时代，回想起我年少的学生时代，大概就是与电脑为伴吧，玩与学都离不开它。而现在给我留下的也只剩下一个打不开的U盘和一个读不出的硬盘了……我曾想在未来的某一天去修复他们，看看那时的自己在里面到底存了什么样的故事，但那一天却不知道什么时候到来。</p>
<hr>
<p>长大了，那就成熟一点，把幼稚藏起来，看看自己的真面目吧。</p>
]]></content>
      
        <categories>
            
            <category> 生活LIFE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Material主题的改造]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/23/Material%E4%B8%BB%E9%A2%98%E7%9A%84%E6%94%B9%E9%80%A0/</url>
      <content type="html"><![CDATA[<p>我的博客就是基于hexo-theme-material主题进行改造的，我不是前端攻城狮，所以写的烂，仅供参考，请勿吐槽……</p>
<p><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">material主题源码</a><br><a href="https://material.viosey.com/" target="_blank" rel="external">material食用说明书</a></p>
<h2 id="首页文章添加标签"><a href="#首页文章添加标签" class="headerlink" title="首页文章添加标签"></a>首页文章添加标签</h2><ul>
<li>在主题文件夹 layout_partial 内找到 Paradox-post_entry.ejs 文件</li>
<li>找到</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Category --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_entry-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">list_categories(post.categories,</span> <span class="token attr-name">{</span>
            <span class="token attr-name"><span class="token namespace">show_count:</span></span> <span class="token attr-name">false,</span>
            <span class="token attr-name"><span class="token namespace">class:</span></span> <span class="token attr-name">'post_tag',</span>
            <span class="token attr-name"><span class="token namespace">style:</span></span> <span class="token attr-name">'none'</span>
        <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是显示分类的代码</p>
<ul>
<li>在这段代码前添加</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Tags --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_entry-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">list_tags(post.tags,</span> <span class="token attr-name">{</span>
            <span class="token attr-name"><span class="token namespace">show_count:</span></span> <span class="token attr-name">false,</span>
            <span class="token attr-name"><span class="token namespace">class:</span></span> <span class="token attr-name">'post_category',</span>
            <span class="token attr-name"><span class="token namespace">style:</span></span> <span class="token attr-name">'none'</span>
        <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一段就是添加标签的代码，第10行是“|”分割符，用于分割标签和分类</p>
<h2 id="代码高亮染色"><a href="#代码高亮染色" class="headerlink" title="代码高亮染色"></a>代码高亮染色</h2><p>可以参考<a href="https://material.viosey.com/expert/" target="_blank" rel="external">官方文档</a>安装插件 <strong>hexo-prism-plugin</strong></p>
<p>安装指令： <strong>npm i -S hexo-prism-plugin</strong></p>
<p>但是基于这个插件的文档虽然可以染色，但是在代码行数标注方面有不少bug，所以在该插件的基础上又进行了一定的优化（至少比原来稍微好看一点）</p>
<p>经实测，在Material主题下，只有”coy”主题会显示代码行数，但是显示的位置很奇怪，所以就选择该主题对代码样式进行修改，主要修改两处</p>
<p>在<strong>站点目录</strong>下，找到路径 \node_modules\prismjs\plugins\line-numbers 中 prism-line-numbers.css文件并打开</p>
<p>将</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token selector"><span class="token class">.line-numbers</span> <span class="token class">.line-numbers-rows</span> </span><span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
        <span class="token property">padding-left</span><span class="token punctuation">:</span> -<span class="token number">3.8</span>em<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">3.2</span>em<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* works for line-numbers below 1000 lines */</span>
        <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>
        <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>

        <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>中的 width 属性进行修改，该属性是代码行数的宽度，我将其修改为2em</p>
<p>在<strong>主题目录</strong>下，找到路径 \source\css 中的 style.css 文件并打开</p>
<p>将</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token selector"><span class="token id">#post-content</span> pre </span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f7f7f7</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">19</span>px<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>中的 padding 属性进行修改，该属性是代码块的四周内间距，原css样式设置为上下左右都为16px，我将其修改为</p>
<pre class="line-numbers language-css"><code class="language-css">    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">16</span>px <span class="token number">0</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使其左右间距为0，上下间距还是保持16px</p>
<p>最终样式如本文所示，虽然感觉还是不那么好看，但是比原来的好看</p>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> material </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编程训练]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/22/%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/</url>
      <content type="html"><![CDATA[<h3 id="在线编程网址"><a href="#在线编程网址" class="headerlink" title="在线编程网址"></a>在线编程网址</h3><ul>
<li><a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a><br>听说很适合找实习的做，每道题里面也有题解，以及运行速度比较。</li>
<li><a href="http://codeforces.com/" target="_blank" rel="external">Codeforces</a><br>很早以前注册过账号（<del>然后再也没动过</del>）</li>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网nowcoder</a><br>这个网上也有很多题目，有的也比较经典（<del>甚至还搬了很多OJ题目</del>），也有面试笔试会考的题目，只要不是靠算法什么的，题目都不会很难</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习STUDY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Codeforces </tag>
            
            <tag> nowcoder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实习相关]]></title>
      <url>https://stevenxiaoming.github.io/2017/03/22/%E5%AE%9E%E4%B9%A0%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>我也不知道写什么好<code>_(:зゝ∠)_</code>，先编一份简历出来吧。<br>不过，首先还要找一份合适的模板。</p>
<p>有的内推群会给内推机会，有机会可以去看看。作为程序猿的话，推广自己最好的平台莫过于github了吧。</p>
<h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><ul>
<li><a href="http://www.zhiyeapp.com/" target="_blank" rel="external">知页</a><br>在线制作简历，只要填空就好了</li>
<li>各类求职网站，也可以制作简历，并且可以直接导出。</li>
</ul>
<h2 id="实习关注"><a href="#实习关注" class="headerlink" title="实习关注"></a>实习关注</h2><ul>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网</a><br>我也不知道是怎么找到这个网站的，不过里面有很多实习单位的笔试真题，还有专项训练什么可以做做看，了解下自己的水平也是不错的</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习&amp;工作WORK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实习 </tag>
            
            <tag> 内推 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
